name: bpf-ci

on:
  pull_request:
    branches-ignore:
      - bpf
      - bpf-next
      - bpf_test
      - bpf-next_test
  push:
    branches:
      - bpf_base
      - bpf-next_base

concurrency:
  group: ci-test-${{ github.sha }}
  cancel-in-progress: false

jobs:
  llvm-toolchain:
    runs-on: ubuntu-latest
    outputs:
      llvm: ${{ steps.llvm-toolchain-impl.outputs.version }}
    steps:
      - id: llvm-version
        uses: danielocfb/libbpf-ci/get-llvm-version@topic/kbuild-output
      - id: llvm-toolchain-impl
        shell: bash
        run: echo "version=llvm-${{ steps.llvm-version.outputs.version }}" >> $GITHUB_OUTPUT
  set-matrix:
    needs: llvm-toolchain
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.set-matrix-impl.outputs.build_matrix }}
      test-matrix: ${{ steps.set-matrix-impl.outputs.test_matrix }}
    steps:
      - id: set-matrix-impl
        shell: python3 -I {0}
        run: |
          from json import dumps
          import os

          def set_output(name, value):
            """Write an output variable to the GitHub output file."""
            with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
              f.write(f"{name}={value}\n")

          def generate_test_config(test):
            """Create the configuration for the provided test."""
            experimental = test.endswith("_parallel")
            config = {
              "test": test,
              "continue_on_error": experimental,
              # While in experimental mode, parallel jobs may get stuck
              # anywhere, including in user space where the kernel won't detect
              # a problem and panic. We add a second layer of (smaller) timeouts
              # here such that if we get stuck in a parallel run, we hit this
              # timeout and fail without affecting the overall job success (as
              # would be the case if we hit the job-wide timeout). For
              # non-experimental jobs, 360 is the default which will be
              # superseded by the overall workflow timeout (but we need to
              # specify something).
              "timeout_minutes": 30 if experimental else 360,
            }
            return config

          matrix = [
            {"kernel": "LATEST", "runs_on": ["ubuntu-latest", "self-hosted"], "arch": "x86_64", "toolchain": "gcc"},
          ]
          self_hosted_repos = [
            "kernel-patches/bpf",
            "kernel-patches/vmtest",
          ]

          # Only a few repository within "kernel-patches" use self-hosted runners.
          if "${{ github.repository_owner }}" != "kernel-patches" or "${{ github.repository }}" not in self_hosted_repos:
            # Outside of those repositories, remove the self-hosted label and skip
            # any testing on s390x, as no suitable runners will be available.
            for idx in range(len(matrix) - 1, -1, -1):
              if "z15" in matrix[idx]["runs_on"]:
                del matrix[idx]
              else:
                matrix[idx]["runs_on"].remove("self-hosted")

          build_matrix = {"include": matrix}
          set_output("build_matrix", dumps(build_matrix))

          tests = [
            "test_progs",
            "test_progs_parallel",
            "test_progs_no_alu32",
            "test_progs_no_alu32_parallel",
            "test_maps",
            "test_verifier",
          ]
          test_matrix = {"include": [{**config, **generate_test_config(test)}
                                      for config in matrix
                                        for test in tests]}
          set_output("test_matrix", dumps(test_matrix))
  build:
    name: build for ${{ matrix.arch }} with ${{ matrix.toolchain }}
    needs: set-matrix
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-matrix.outputs.build-matrix) }}
    env:
      KERNEL: ${{ matrix.kernel }}
      REPO_ROOT: ${{ github.workspace }}
      REPO_PATH: ""
      KBUILD_OUTPUT: kbuild-output/
    steps:
      - uses: actions/checkout@v3
        # We fetch an actual bit of history here to facilitate incremental
        # builds (which may check out some earlier upstream change).
        with:
          fetch-depth: 50
      - if: ${{ github.repository == 'kernel-patches/vmtest' }}
        name: Download bpf-next tree
        uses: danielocfb/libbpf-ci/get-linux-source@topic/kbuild-output
        with:
          dest: '.kernel'
      - if: ${{ github.repository == 'kernel-patches/vmtest' }}
        name: Move linux source in place
        shell: bash
        run: |
          rm -rf .kernel/.git
          cp -rf .kernel/. .
          rm -rf .kernel
      - if: ${{ github.repository != 'kernel-patches/vmtest' }}
        name: Get commit meta-data
        id: get-commit-metadata
        run: |
          echo "timestamp=$(git show --format='%ct' --no-patch)" >> "${GITHUB_OUTPUT}"
          # Note that we assume here that the base_ref will be available to
          # follow on runs. That may only be a given if it refers to an upstream
          # commit. However, changes to KPD could change that fact!
          echo "upstream_sha=${{ github.sha }}" >> "${GITHUB_OUTPUT}"
        shell: bash
      - if: ${{ github.repository != 'kernel-patches/vmtest' }}
        name: Pull recent KBUILD_OUTPUT contents
        uses: actions/cache@v3
        with:
          path: ${{ env.KBUILD_OUTPUT }}
          key: kbuild-output-${{ runner.os }}-${{ matrix.toolchain }}-${{ steps.get-commit-metadata.outputs.timestamp }}-${{ github.event_name }}-${{ github.sha }}
          restore-keys: |
            kbuild-output-${{ runner.os }}-${{ matrix.toolchain }}-${{ steps.get-commit-metadata.outputs.timestamp }}-
            kbuild-output-${{ runner.os }}-${{ matrix.toolchain }}-
      - if: ${{ github.repository != 'kernel-patches/vmtest' }}
        name: Prepare incremental build
        shell: bash
        run: |
          set -e -u

          mkdir -p "${KBUILD_OUTPUT}"
          upstream_sha="${{ steps.get-commit-metadata.outputs.upstream_sha }}"
          echo "Using build base SHA-1 ${upstream_sha}"

          if [ -f "${KBUILD_OUTPUT}/build-base-sha" -a -f "${KBUILD_OUTPUT}/build-timestamp" ]; then
            build_base_sha="$(cat "${KBUILD_OUTPUT}/build-base-sha")"
            build_timestamp="$(cat "${KBUILD_OUTPUT}/build-timestamp")"
            echo "Setting up build state for ${build_base_sha} @ ${build_timestamp}"

            git checkout --quiet "${build_base_sha}" ||
              (
                # If cached artifacts became stale for one reason or another, we
                # may not have the build base SHA available. Fetch it and retry.
                git fetch origin "${build_base_sha}" &&
                git checkout --quiet "${build_base_sha}"
              )
            git ls-files | xargs --max-args=10000 touch -m --no-create --date="${build_timestamp}"
            git checkout --quiet -
            echo "Restored source code time stamp to time of last build"
          else
            echo "No previous build data found"
          fi

          echo -n "${upstream_sha}" > "${KBUILD_OUTPUT}/build-base-sha"
          echo -n "$(date --iso-8601=ns)" > "${KBUILD_OUTPUT}/build-timestamp"
      - uses: danielocfb/libbpf-ci/patch-kernel@topic/kbuild-output
        with:
          patches-root: '${{ github.workspace }}/ci/diffs'
          repo-root: '${{ github.workspace }}'
      - name: Setup build environment
        uses: danielocfb/libbpf-ci/setup-build-env@topic/kbuild-output
      - name: Build kernel image
        uses: danielocfb/libbpf-ci/build-linux@topic/kbuild-output
        with:
          arch: ${{ matrix.arch }}
          toolchain: ${{ matrix.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
      - if: ${{ github.repository != 'kernel-patches/vmtest' && github.event_name != 'push' }}
        name: Remove KBUILD_OUTPUT contents
        shell: bash
        run: |
          # Remove KBUILD_OUTPUT to prevent cache creation for pull request
          # baselines.
          rm -rf "${KBUILD_OUTPUT}"
